{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // 1. How do we wanna do the initialState. localStorage or like in Maks video?\n// const initialState = localStorage\n// 2. Created all the reducers based on the useStates in PostFormLogic.js\n\nconst form = createSlice({\n  name: 'form',\n  initialState: {\n    details: [{\n      id: 1,\n      status: '',\n      petname: '',\n      species: '',\n      breed: '',\n      sex: '',\n      description: '',\n      location: '',\n      email: '',\n      errors: null\n    }]\n  },\n  reducers: {\n    setStatus: (store, action) => {\n      store.status = action.payload;\n    },\n    setPetname: (store, action) => {\n      store.petname = action.payload;\n    },\n    setSpecies: (store, action) => {\n      store.species = action.payload;\n    },\n    setBreed: (store, action) => {\n      store.breed = action.payload;\n    },\n    setSex: (store, action) => {\n      store.sex = action.payload;\n    },\n    setDescription: (store, action) => {\n      store.description = action.payload;\n    },\n    setLocation: (store, action) => {\n      store.location = action.payload;\n    },\n    setEmail: (store, action) => {\n      store.email = action.payload;\n    },\n    setErrors: (store, action) => {\n      store.errors = action.payload;\n    }\n  }\n});\nexport default form;","map":{"version":3,"sources":["/Users/mg/Desktop/Hemsidor/demo/final-project-fe/code/src/reducers/form.js"],"names":["createSlice","form","name","initialState","details","id","status","petname","species","breed","sex","description","location","email","errors","reducers","setStatus","store","action","payload","setPetname","setSpecies","setBreed","setSex","setDescription","setLocation","setEmail","setErrors"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;AAEA;;AAEA,MAAMC,IAAI,GAAGD,WAAW,CAAC;AACvBE,EAAAA,IAAI,EAAE,MADiB;AAEvBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,CAAC;AACRC,MAAAA,EAAE,EAAE,CADI;AAERC,MAAAA,MAAM,EAAE,EAFA;AAGRC,MAAAA,OAAO,EAAE,EAHD;AAIRC,MAAAA,OAAO,EAAE,EAJD;AAKRC,MAAAA,KAAK,EAAE,EALC;AAMRC,MAAAA,GAAG,EAAE,EANG;AAORC,MAAAA,WAAW,EAAE,EAPL;AAQRC,MAAAA,QAAQ,EAAE,EARF;AASRC,MAAAA,KAAK,EAAE,EATC;AAURC,MAAAA,MAAM,EAAE;AAVA,KAAD;AADG,GAFS;AAgBvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACX,MAAN,GAAeY,MAAM,CAACC,OAAtB;AACD,KAHO;AAIRC,IAAAA,UAAU,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACV,OAAN,GAAgBW,MAAM,CAACC,OAAvB;AACD,KANO;AAORE,IAAAA,UAAU,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACT,OAAN,GAAgBU,MAAM,CAACC,OAAvB;AACD,KATO;AAURG,IAAAA,QAAQ,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;AACD,KAZO;AAaRI,IAAAA,MAAM,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACP,GAAN,GAAYQ,MAAM,CAACC,OAAnB;AACD,KAfO;AAgBRK,IAAAA,cAAc,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACN,WAAN,GAAmBO,MAAM,CAACC,OAA1B;AACD,KAlBO;AAmBRM,IAAAA,WAAW,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACC,OAAxB;AACD,KArBO;AAsBRO,IAAAA,QAAQ,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACC,OAArB;AACD,KAxBO;AAyBRQ,IAAAA,SAAS,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACH,MAAN,GAAeI,MAAM,CAACC,OAAtB;AACD;AA3BO;AAhBa,CAAD,CAAxB;AAgDA,eAAelB,IAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\n// 1. How do we wanna do the initialState. localStorage or like in Maks video?\n// const initialState = localStorage\n\n// 2. Created all the reducers based on the useStates in PostFormLogic.js\n\nconst form = createSlice({\n  name: 'form',\n  initialState: {\n    details: [{ \n      id: 1,\n      status: '',\n      petname: '',\n      species: '',\n      breed: '',\n      sex: '',\n      description: '',\n      location: '',\n      email: '',\n      errors: null\n    }]\n  },\n  reducers: {\n    setStatus: (store, action) => {\n      store.status = action.payload\n    },\n    setPetname: (store, action) => {\n      store.petname = action.payload\n    },\n    setSpecies: (store, action) => {\n      store.species = action.payload\n    },\n    setBreed: (store, action) => {\n      store.breed = action.payload\n    },\n    setSex: (store, action) => {\n      store.sex = action.payload\n    },\n    setDescription: (store, action) => {\n      store.description= action.payload\n    },\n    setLocation: (store, action) => {\n      store.location = action.payload\n    },\n    setEmail: (store, action) => {\n      store.email = action.payload\n    },\n    setErrors: (store, action) => {\n      store.errors = action.payload\n    }\n  }\n\n})\n\nexport default form"]},"metadata":{},"sourceType":"module"}