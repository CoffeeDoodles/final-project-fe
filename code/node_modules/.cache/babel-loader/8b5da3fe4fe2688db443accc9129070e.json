{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// const useFetch = (url) => {\n//   const [data, setData] = useState(null);\n//   const [isPending, setIsPending] = useState(true);\n//   const [error, setError] = useState(null);\n//   useEffect(() => {\n//     // cleanup function for moving between pages\n//     const abortCont = new AbortController();\n//     fetch (url, { signal: abortCont.signal })\n//       .then(res => {\n//         if(!res.ok) {\n//           throw Error ('Could not find the data for that resource...');\n//         }\n//         return res.json();\n//       })\n//       .then(data => {\n//         setData(data);\n//         setIsPending(false);\n//         setError(null);\n//       })\n//       .catch(err => {\n//         if (err.name === 'AbortError') {\n//           console.log('fetch aborted')\n//         } else {\n//           setIsPending(false);\n//           setError(err.message);\n//         }\n//       })\n//     // aborts whatever fetch it's associating with\n//     return () => abortCont.abort();\n//   }, [url])\n//   return { data, isPending, error }\n// };\n// export default useFetch;","map":{"version":3,"sources":["/home/coffeedoodles/Technigo/final-project-fe/petspotter-fe/code/src/components/WIP/useFetch.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// const useFetch = (url) => {\n//   const [data, setData] = useState(null);\n//   const [isPending, setIsPending] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     // cleanup function for moving between pages\n//     const abortCont = new AbortController();\n//     fetch (url, { signal: abortCont.signal })\n//       .then(res => {\n//         if(!res.ok) {\n//           throw Error ('Could not find the data for that resource...');\n//         }\n//         return res.json();\n//       })\n//       .then(data => {\n//         setData(data);\n//         setIsPending(false);\n//         setError(null);\n//       })\n//       .catch(err => {\n//         if (err.name === 'AbortError') {\n//           console.log('fetch aborted')\n//         } else {\n//           setIsPending(false);\n//           setError(err.message);\n//         }\n//       })\n//     // aborts whatever fetch it's associating with\n//     return () => abortCont.abort();\n//   }, [url])\n//   return { data, isPending, error }\n// };\n\n// export default useFetch;"]},"metadata":{},"sourceType":"module"}